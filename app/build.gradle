apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

dependencies {
    implementation project(':speechutils:app')
    implementation project(':net-speech-api')
    implementation 'commons-io:commons-io:2.5'
    implementation 'com.koushikdutta.async:androidasync:2.2.1'
    implementation 'com.android.support:recyclerview-v7:' + rootProject.supportLibVersion
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

android {
    compileSdkVersion rootProject.compileSdkVersion

    // API level 3: some default button was not found, but we didn't explore it further.
    // API level 7: MediaRecorder.AudioSource.VOICE_RECOGNITION
    // API level 8: android.speech.SpeechRecognizer and android.speech.RecognitionService
    // API level 14: @android:style/Theme.DeviceDefault
    defaultConfig {
        applicationId 'ee.ioc.phon.android.speak'
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1700
        versionName '1.7.00'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    signingConfigs {
        release {
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFile getDefaultProguardFile('proguard-android.txt')
            proguardFile 'proguard.cfg'
            signingConfig signingConfigs.release
        }
    }
    lintOptions {
        // TODO: in the future check for Kotlin-Java interop
        //check 'Interoperability'
        disable 'ResourceType', 'AppLinkUrlError', 'EllipsizeMaxLines', 'RtlSymmetry'
    }
}


if (project.hasProperty('storePassword') &&
        project.hasProperty('keyPassword')) {
    android.signingConfigs.release.storeFile = file(System.getenv("KEYSTORE"))
    android.signingConfigs.release.keyAlias = System.getenv("KEY_ALIAS")
    android.signingConfigs.release.storePassword = storePassword
    android.signingConfigs.release.keyPassword = keyPassword
} else {
    android.buildTypes.release.signingConfig = null
}


task(deploy) << {
    description 'Copy the APK and the ProGuard mapping file to the deploy directory'

    def deploy_dir = System.getenv('APK_DEPLOY_DIR')

    def version = android.defaultConfig.versionName

    def outputs = 'build/outputs/'
    def apk1 = outputs + 'apk/release/app-release.apk'
    def apk2 = "${deploy_dir}K6nele-${version}.apk"
    def mapping1 = outputs + 'mapping/release/mapping.txt'
    def mapping2 = "${deploy_dir}K6nele-mapping-${version}.txt"

    exec {
        commandLine 'cp', '--verbose', apk1, apk2
    }

    exec {
        commandLine 'cp', '--verbose', mapping1, mapping2
    }

    exec {
        commandLine 'ls', '-l', deploy_dir
    }

    println "adb uninstall ${android.defaultConfig.applicationId}"
    println "adb install ${apk2}"
}
