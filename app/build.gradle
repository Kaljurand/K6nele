plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.devtools.ksp'
}

dependencies {
    implementation project(':speechutils:app')
    // TODO: used only in ChunkedWebRecSessionResult, use Android's JSON library instead
    implementation 'com.googlecode.json-simple:json-simple:1.1'
    implementation 'com.koushikdutta.async:androidasync:3.1.0'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.preference:preference-ktx:1.2.1'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    // implementation 'androidx.activity:activity:1.4.0'
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'com.google.android.material:material:1.10.0'

    // TODO: needed?
    implementation 'androidx.room:room-common:2.6.0'
    implementation 'androidx.room:room-ktx:2.6.0'

    // Room
    def room_version = "2.6.0"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    // TODO: use KSP
    ksp "androidx.room:room-compiler:$room_version"

    implementation 'com.google.android.datatransport:transport-runtime:3.2.0'
    implementation "androidx.room:room-ktx:2.6.0"


    // Jetpack Compose
    implementation "androidx.compose.ui:ui:1.5.4"
    implementation "androidx.compose.ui:ui-tooling:1.5.4"
    implementation "androidx.compose.material:material:1.5.4"
    implementation "androidx.compose.runtime:runtime-livedata:1.5.4"
    implementation "androidx.compose.runtime:runtime:1.5.4"
    // Jetpack Compose Integration with Activities
    implementation "androidx.activity:activity-compose:1.8.0"

    // ViewModel and LiveData
    def lifecycle_version = "2.7.0-beta01"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.1"
}

android {
    compileSdk rootProject.compileSdk

    // API level 3: some default button was not found, but we didn't explore it further.
    // API level 7: MediaRecorder.AudioSource.VOICE_RECOGNITION
    // API level 8: android.speech.SpeechRecognizer and android.speech.RecognitionService
    // API level 14: @android:style/Theme.DeviceDefault
    // API level 21: Jetpack Compose
    defaultConfig {
        applicationId 'ee.ioc.phon.android.speak'
        minSdkVersion 24
        targetSdkVersion 34
        versionCode 1914
        versionName '1.9.14'
        vectorDrawables.useSupportLibrary = true
        // Keep only en and et resources
        resourceConfigurations += ['en', 'et']
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE.txt', 'META-INF/NOTICE.txt']
        }
    }


    signingConfigs {
        release {}
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFile 'proguard.cfg'
            signingConfig signingConfigs.release
        }
    }


    buildFeatures {
        viewBinding true
    }
    lint {
        // TODO: in the future check for Kotlin-Java interop
        //check 'Interoperability'
        disable 'ResourceType', 'AppLinkUrlError', 'EllipsizeMaxLines', 'RtlSymmetry', 'Autofill'
    }
    namespace 'ee.ioc.phon.android.speak'
}


if (project.hasProperty('storePassword') && project.hasProperty('keyPassword')) {
    android.signingConfigs.release.storeFile = file(System.getenv("KEYSTORE"))
    android.signingConfigs.release.keyAlias = System.getenv("KEY_ALIAS")
    android.signingConfigs.release.storePassword = storePassword
    android.signingConfigs.release.keyPassword = keyPassword
} else {
    println "WARNING: The release will not be signed"
    android.buildTypes.release.signingConfig = null
}


tasks.register('deploy') {
    // TODO: temporary fix for the issue with accessing the android-property from doLast
    notCompatibleWithConfigurationCache("https://docs.gradle.org/current/userguide/configuration_cache.html")
    doLast {
        description 'Copy the APK and the ProGuard mapping file to the deploy directory'

        def deploy_dir = System.getenv('APK_DEPLOY_DIR')
        def version = android.defaultConfig.versionName
        def name = 'K6nele'

        def outputs = 'build/outputs/'
        def apk1 = outputs + 'apk/release/app-release.apk'
        def apk2 = "${deploy_dir}${name}-${version}.apk"
        def mapping1 = outputs + 'mapping/release/mapping.txt'
        def mapping2 = "${deploy_dir}${name}-mapping-${version}.txt"

        exec {
            commandLine 'cp', '--verbose', apk1, apk2
        }

        exec {
            commandLine 'cp', '--verbose', mapping1, mapping2
        }

        exec {
            commandLine 'ls', '-l', deploy_dir
        }

        println "adb uninstall ${android.defaultConfig.applicationId}"
        println "adb install ${apk2}"
    }
}
